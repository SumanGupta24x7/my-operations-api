create database OPERATIONS;

show databases;

use OPERATIONS;

CREATE TABLE ASSIGNEE(
    ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    REGISTERED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE TASK_STATUS(
    ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    STATUS VARCHAR(30) NOT NULL
);

CREATE TABLE TASK(
    ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    TASK_NAME VARCHAR(50) NOT NULL,
    DESCRIPTION VARCHAR(300) NULL,
    ASSIGNEE_ID INT NOT NULL,
    STATUS_ID INT NOT NULL,
    DUE_DATE DATE NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL,
    FOREIGN KEY (ASSIGNEE_ID) REFERENCES ASSIGNEE(ID),
    FOREIGN KEY (STATUS_ID) REFERENCES TASK_STATUS(ID)
);

INSERT INTO TASK_STATUS(STATUS) VALUES("To do");
INSERT INTO TASK_STATUS(STATUS) VALUES("In progress");
INSERT INTO TASK_STATUS(STATUS) VALUES("Done");

INSERT INTO ASSIGNEE(NAME) VALUES("Suman");

INSERT INTO TASK(TASK_NAME, DESCRIPTION, ASSIGNEE_ID, STATUS_ID, DUE_DATE) VALUES("Learn GoLang", "Learn to create apis in Golang", 1, 1, "2023-10-05");

SELECT * FROM ASSIGNEE;
SELECT * FROM TASK_STATUS;
SELECT * FROM TASK;

SELECT t.ID, t.TASK_NAME, t.DESCRIPTION, t.ASSIGNEE_ID, a.NAME, t.STATUS_ID, ts.STATUS, t.DUE_DATE, t.CREATED_AT, t.UPDATED_AT
FROM TASK t
INNER JOIN TASK_STATUS ts ON t.STATUS_ID = ts.ID
INNER JOIN ASSIGNEE a ON t.ASSIGNEE_ID = a.ID;





SELECT t.ID, t.TASK_NAME, t.DESCRIPTION, t.ASSIGNEE_ID, a.NAME, t.STATUS_ID, ts.STATUS, t.DUE_DATE, 
    t.CREATED_AT, COALESCE(t.UPDATED_AT, '') FROM TASK t
	INNER JOIN TASK_STATUS ts ON t.STATUS_ID = ts.ID
	INNER JOIN ASSIGNEE a ON t.ASSIGNEE_ID = a.ID;
